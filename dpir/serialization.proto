// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package hintless_pir;

import "linpir/serialization.proto";
import "shell_encryption/rns/serialization.proto";

// For faster allocations of sub-messages.
option cc_enable_arenas = true;

// HintlessPir server's public parameters to be sent to the client before any
// queries are issued. Generated by the server.
message HintlessPirServerPublicParams {
  // The PRNG seed for sampling the "A" matrix of LWE query ciphertext.
  optional bytes prng_seed_lwe_query_pad = 1;

  // The PRNG seeds for sampling the "a" polynomial of each LinPIR query
  // ciphertext.
  repeated bytes prng_seed_linpir_ct_pads = 2;

  // The PRNG seed for sampling the "a" polynomials in the Galois automorphism
  // key shared by all LinPIR instances.
  optional bytes prng_seed_linpir_gk_pad = 3;
}

message HintlessPirRequest {
  optional SerializedLweCiphertext ct_query_vector = 1;

  // The "b" components of the LinPir ciphertexts that encrypt the LWE secrets.
  repeated rlwe.SerializedRnsPolynomial linpir_ct_bs = 2;

  // The "b" components of the Galois key for all LinPir requests.
  repeated rlwe.SerializedRnsPolynomial linpir_gk_bs = 3;
}

message HintlessPirResponse {
  repeated SerializedLweCiphertext ct_records = 1;
  repeated LinPirResponse linpir_responses = 2;
}

// This is the "b" part of a LWE ciphertext (A, b), where the "A" part is
// assumed be fixed and hence not serialized. Furthermore, the ciphertext
// modulus is assumed to be 2^32.
message SerializedLweCiphertext {
  repeated uint32 b_coeffs = 1 [packed = true];
}
